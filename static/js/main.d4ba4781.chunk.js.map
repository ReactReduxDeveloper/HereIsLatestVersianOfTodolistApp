{"version":3,"sources":["serviceWorker.ts","api/todolists_api.ts","utils/error-utils.ts","features/Login/login-reduce.ts","app/app-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolist/TodoListLists.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatues","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","title","post","id","delete","put","taskId","taskID","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","initialized","setAppInitializedAC","changeTodolistFilterAC","filter","updateTaskTC","todolistID","domainModel","getState","task","tasks","find","t","Error","deadline","priority","startDate","description","then","res","resultCode","updateTaskAC","catch","rootReducer","combineReducers","todolists","state","action","tl","todolist","entityStatus","map","todoListId","stateCopy","forEach","app","console","log","login","store","createStore","applyMiddleware","thunkMiddleware","useTypedDispatch","useDispatch","AddItemForm","React","memo","disabled","addItem","useState","setTitle","setError","addTask","trim","TextField","variant","onChange","event","currentTarget","onKeyDown","key","label","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","props","titleValue","editMode","setEditMode","onBlur","e","autoFocus","onDoubleClick","Task","changeTaskStatus","useCallback","toDoListID","onChangeTitleHandler","newValue","className","Completed","Checkbox","checked","newIsDone","New","removeTaskAC","Delete","Todolist","demo","useSelector","useEffect","setTasksAC","items","allFilterHandler","activeFilterHandler","completedFilterHandler","removeTodoListHandler","changeTodoListTitle","changeTitleTodolistAC","changeTodolistTitleTC","addTaskAC","item","addTaskTC","tasksForTodoList","Button","TodoListLists","todoLists","addTodolist","addTodoListsTC","Grid","container","style","padding","spacing","Paper","to","Alert","ref","elevation","CustomizedSnackbars","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","navigate","useNavigate","dispacth","logOutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4ba4781.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n// types\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatues {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatues\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatues\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"a0f1c3b0-e46a-48e0-926c-6dc468479101\"\r\n    }\r\n})\r\n\r\nexport const todolistsApi = {\r\n\r\n    getTodoLists() {\r\n        return instance.get<TodoListsType[]>(\"todo-lists\")\r\n\r\n    },\r\n\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListsType }>>(\"todo-lists\", {title: title})\r\n\r\n    },\r\n\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${id}`)\r\n\r\n    },\r\n\r\n    updateTodoListTitle(id: string, title: string) {\r\n        return instance.put<ResponseType<{ item: TodoListsType }>>(`todo-lists/${id}`, {title: title})\r\n\r\n    },\r\n\r\n\r\n    getTasks(id: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${id}/tasks`)\r\n    },\r\n\r\n    deleteTasks(id: string, taskId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${id}/tasks/${taskId}`)\r\n    },\r\n    createTasks(id: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${id}/tasks`, {title: title})\r\n    },\r\n    updateTasks(id: string, taskID: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`todo-lists/${id}/tasks/${taskID}`, model)\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>(\"auth/login\")\r\n    },\r\n    me() {\r\n        return  instance.get<ResponseType<{id: number; email:string, login: string}>>(\"auth/me\")\r\n    }\r\n}","import {setAppErrorAC, SetErrorActionType, setAppStatusAC, SetStatusActionType} from \"../app/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists_api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"../app/store\";\r\nimport {TaskActionType} from \"../features/TodolistsList/Todolist/tasks-reducer\";\r\n\r\nexport const handleServerAppError = <D> (data: ResponseType<D>,dispatch: ThunkDispatch<AppRootState, any, TaskActionType | SetErrorActionType | SetStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\nexport const handleServerNetworkError = (error: any,dispatch: ThunkDispatch<AppRootState, any, TaskActionType | SetErrorActionType | SetStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {TaskActionType, updateTaskAC} from \"../TodolistsList/Todolist/tasks-reducer\";\r\nimport {SetErrorActionType, setAppStatusAC, SetStatusActionType} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists_api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type LoginActionType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {}\r\nlet initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: any = initialState, action: LoginActionType): any => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value})\r\n\r\n\r\n//TC\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch<AppRootState, any, LoginActionType | SetStatusActionType | SetErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch<AppRootState, any, LoginActionType | SetStatusActionType | SetErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })}\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"./store\";\r\nimport {TodoListActionType} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {authAPI} from \"../api/todolists_api\";\r\nimport {LoginActionType, setIsLoggedInAC} from \"../features/Login/login-reduce\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ErrorType,\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            console.log(1)\r\n            return {...state, initialized: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: ErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\nexport const initializedTC = () => (dispatch: ThunkDispatch<AppRootState, any, ActionsType | LoginActionType>) => {\r\n    try {\r\n        authAPI.me().then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setIsLoggedInAC(false))\r\n            }\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n    } catch {\r\n        dispatch(setAppInitializedAC(true))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport type SetErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetStatusActionType = ReturnType<typeof setAppStatusAC>\r\ntype ActionsType = SetErrorActionType\r\n    | SetStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n\r\n","import {FilterType} from \"../../../app/App\";\r\nimport {todolistsApi, TodoListsType} from \"../../../api/todolists_api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"../../../app/store\";\r\nimport {RequestStatusType, SetErrorActionType, setAppStatusAC, SetStatusActionType} from \"../../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>;\r\n\r\nexport type TodoListActionType =\r\n    RemoveTodolistType\r\n    | AddTodolistType\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTodoListsEntityStatusAC>\r\n\r\nexport type TodoListsDomainType = TodoListsType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: TodoListsDomainType[] = []\r\n\r\nexport const todoListsReducer = (state: TodoListsDomainType[] = initialState, action: TodoListActionType): Array<TodoListsDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: \"all\", entityStatus: 'idle'}, ...state]\r\n\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId}) as const\r\nexport const addTodolistAC = (todolist: TodoListsType) => ({type: 'ADD-TODOLIST', todolist}) as const\r\nexport const changeTitleTodolistAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n}) as const\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\nexport const setTodoListsAC = (todolists: TodoListsType[]) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists: todolists\r\n}) as const\r\nexport const setTodoListsEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n}) as const\r\n\r\n// TC\r\nexport const fetchTodoListsTC = () => (dispatch: ThunkDispatch<AppRootState, any, TodoListActionType | SetStatusActionType | SetErrorActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsApi.getTodoLists()\r\n        .then((res) => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\nexport const removeTodoListsTC = (todolistID: string) => (dispatch: ThunkDispatch<AppRootState, any, TodoListActionType | SetStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(setTodoListsEntityStatusAC(todolistID, 'loading'))\r\n    todolistsApi.deleteTodoList(todolistID)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTodoListsTC = (title: string) => (dispatch: ThunkDispatch<AppRootState, any, TodoListActionType | SetStatusActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsApi.createTodoList(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistID: string, title: string) => (dispatch: ThunkDispatch<AppRootState, any, TodoListActionType>) => {\r\n    todolistsApi.updateTodoListTitle(todolistID, title)\r\n        .then((res) => {\r\n            dispatch(changeTitleTodolistAC(todolistID, title))\r\n        })\r\n}\r\n\r\n","import {AddTodolistType, RemoveTodolistType, SetTodoListsActionType} from \"./todolists-reducer\";\r\nimport {TasksStateType} from \"../../../app/App\";\r\nimport {TaskPriorities, TaskStatues, TaskType, todolistsApi, UpdateTaskModelType} from \"../../../api/todolists_api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"../../../app/store\";\r\nimport {setAppErrorAC, SetErrorActionType, setAppStatusAC, SetStatusActionType} from \"../../../app/app-reducer\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodoListsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\nexport type DomainChangeTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatues\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TaskActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)}\r\n\r\n        case \"ADD-TASK\":\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state, [action.todolistID]: state[action.todolistID]\r\n                    .map(t => t.id === action.taskID ? {...t, ...action.model} : t)\r\n            }\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state};\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistID]: action.tasks};\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// AC\r\nexport const removeTaskAC = (todolistID: string, taskID: string) => ({type: 'REMOVE-TASK', taskID, todolistID}) as const\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (todolistID: string, taskID: string, model: UpdateTaskModelType) => ({\r\n    type: 'UPDATE-TASK',\r\n    todolistID,\r\n    model,\r\n    taskID\r\n}) as const\r\nexport const setTasksAC = (tasks: TaskType[], todolistID: string,) => ({type: 'SET-TASKS', tasks, todolistID}) as const\r\n\r\n// TC\r\nexport const fetchTasksTC = (todolistID: string) => (dispatch: ThunkDispatch<AppRootState, any, TaskActionType | SetStatusActionType | SetErrorActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsApi.getTasks(todolistID)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistID))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n\r\n}\r\nexport const deleteTaskTC = (todolistID: string, taskID: string) => (dispatch: ThunkDispatch<AppRootState, any, TaskActionType>) => {\r\n    todolistsApi.deleteTasks(todolistID, taskID)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(todolistID, taskID))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistID: string, title: string) => (dispatch: ThunkDispatch<AppRootState, any, TaskActionType | SetErrorActionType | SetStatusActionType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsApi.createTasks(todolistID, title)\r\n        .then((res) => {\r\n\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (todolistID: string, taskID: string, domainModel: DomainChangeTaskType) =>\r\n    (dispatch: ThunkDispatch<AppRootState, any, TaskActionType\r\n        | SetErrorActionType\r\n        | SetStatusActionType>, getState: () => AppRootState) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistID].find(t => t.id === taskID)\r\n        if (!task) {\r\n            throw new Error(\"task not Found\")\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            title: task.title,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            startDate: task.startDate,\r\n            description: task.description,\r\n            ...domainModel\r\n        }\r\n        todolistsApi.updateTasks(todolistID, taskID, model)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistID, taskID, model))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport {TodoListActionType, todoListsReducer} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\nimport {TaskActionType, tasksReducer} from \"../features/TodolistsList/Todolist/tasks-reducer\";\r\nimport thunkMiddleware, {ThunkDispatch} from \"redux-thunk\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/login-reduce\";\r\n\r\ntype AppActionType = TodoListActionType | TaskActionType\r\nexport type TypedDispatch = ThunkDispatch<AppRootState, any, AppActionType>\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todoListsReducer,\r\n    tasks: tasksReducer,\r\n    app:appReducer,\r\n    login:authReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nexport const useTypedDispatch = () => useDispatch<TypedDispatch>()\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox, ControlPoint} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({disabled = false, addItem}: AddItemFormPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => setTitle(event.currentTarget.value)\r\n\r\n    const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (event.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else setError(\"Title is required\")\r\n    }\r\n\r\n\r\n    return <>\r\n        <TextField variant=\"outlined\"\r\n                   value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeInputHandler}\r\n                   onKeyDown={onKeyDownInputHandler}\r\n                   error={!!error}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask}\r\n                    color=\"primary\"\r\n                    disabled={disabled}\r\n        >\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </>\r\n})","import React, {ChangeEvent, memo, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    titleValue: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n    const {onChange, titleValue} = props\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n\r\n    const activateEditMode = (): void => {\r\n        setEditMode(true)\r\n        setTitle(titleValue)\r\n    }\r\n\r\n    const activateViewMode = (): void => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>): void => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ?\r\n        <TextField variant=\"outlined\"\r\n                   value={title}\r\n                   onBlur={activateViewMode}\r\n                   onChange={onChangeTitleHandler}\r\n                   autoFocus\r\n        />\r\n        :\r\n        <span onDoubleClick={activateEditMode}>{titleValue}</span>\r\n})","import React, {ChangeEvent, memo, useCallback} from \"react\";\r\nimport {deleteTaskTC, DomainChangeTaskType, updateTaskTC} from \"../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskStatues, TaskType} from \"../../../../api/todolists_api\";\r\nimport {useTypedDispatch} from \"../../../../app/store\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListId: string\r\n\r\n\r\n}\r\nexport const Task = memo((props: TaskPropsType) => {\r\n    const dispatch = useTypedDispatch()\r\n\r\n    const changeTaskStatus = useCallback((toDoListID: string, taskId: string, status: TaskStatues) => {\r\n        const action = updateTaskTC(toDoListID, taskId, {status})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const onChangeCheckBoxElement = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        changeTaskStatus(props.todoListId, props.task.id, newIsDone ? TaskStatues.Completed : TaskStatues.New)\r\n    }\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        const action = updateTaskTC(props.todoListId, props.task.id, {title: newValue})\r\n        dispatch(action)\r\n    }, [dispatch, props.task.id, props.todoListId])\r\n\r\n    const deleteTaskFunctionHandler = () => {\r\n        dispatch(deleteTaskTC(props.todoListId, props.task.id))\r\n    }\r\n\r\n    return (\r\n        <li key={props.task.id}\r\n            className={props.task.status === TaskStatues.Completed ? 'is-done' : ''}>\r\n            <Checkbox color=\"primary\"\r\n                      checked={props.task.status === TaskStatues.Completed}\r\n                      onChange={onChangeCheckBoxElement}/>\r\n\r\n            <EditableSpan onChange={onChangeTitleHandler} titleValue={props.task.title}/>\r\n\r\n            <IconButton onClick={deleteTaskFunctionHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </li>\r\n    )\r\n})","import React, {memo, useCallback, useEffect} from \"react\";\r\nimport {FilterType} from \"../../../app/App\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState, useTypedDispatch} from \"../../../app/store\";\r\nimport {addTaskTC, fetchTasksTC} from \"./tasks-reducer\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    removeTodoListsTC,\r\n    TodoListsDomainType\r\n} from \"./todolists-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatues, TaskType} from \"../../../api/todolists_api\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodoListsDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = memo(function ({demo = false,...props}: PropsType) {\r\n\r\n    const dispatch = useTypedDispatch()\r\n    const tasks = useSelector<AppRootState, TaskType[]>(state => state.tasks[props.todolist.id])\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n            dispatch(fetchTasksTC(props.todolist.id))\r\n        }\r\n        , [])\r\n\r\n    const allFilterHandler = useCallback(() => {\r\n        const action = changeTodolistFilterAC(props.todolist.id, \"all\")\r\n        dispatch(action)\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const activeFilterHandler = useCallback(() => {\r\n        const action = changeTodolistFilterAC(props.todolist.id, \"active\")\r\n        dispatch(action)\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const completedFilterHandler = useCallback(() => {\r\n        const action = changeTodolistFilterAC(props.todolist.id, \"completed\")\r\n        dispatch(action)\r\n    }, [dispatch, props.todolist.id])\r\n\r\n\r\n    const removeTodoListHandler = useCallback(() => {\r\n        const action = removeTodoListsTC(props.todolist.id)\r\n        dispatch(action)\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        const action = changeTodolistTitleTC(props.todolist.id, title)\r\n        dispatch(action)\r\n    }, [props.todolist.id, dispatch])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        const action = addTaskTC(props.todolist.id, title)\r\n        dispatch(action)\r\n    }, [props.todolist.id, dispatch])\r\n\r\n\r\n    let tasksForTodoList = tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodoList = tasks.filter(task => task.status === TaskStatues.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodoList = tasks.filter(task => task.status === TaskStatues.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <EditableSpan titleValue={props.todolist.title} onChange={changeTodoListTitle}/>\r\n            <IconButton onClick={removeTodoListHandler} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul>\r\n                {tasksForTodoList.map(task => (\r\n                    <Task task={task}\r\n                          todoListId={props.todolist.id}\r\n                          key={task.id}\r\n                    />))}\r\n            </ul>\r\n            <div>\r\n                <Button color=\"inherit\" onClick={allFilterHandler}\r\n                        variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button color=\"primary\" onClick={activeFilterHandler}\r\n                        className={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button color=\"secondary\" onClick={completedFilterHandler}\r\n                        className={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default Todolist\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState, useTypedDispatch} from \"../../../app/store\";\r\nimport {addTodoListsTC, fetchTodoListsTC, TodoListsDomainType} from \"./todolists-reducer\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport Todolist from \"./Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst TodoListLists: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const todoLists = useSelector<AppRootState, TodoListsDomainType[]>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.login.isLoggedIn)\r\n\r\n\r\n\r\n    const dispatch = useTypedDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodoListsTC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todoLists.map(todolist => {\r\n                    return <Grid item key={todolist.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={todolist}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\nexport default TodoListLists","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const error = useSelector<AppRootState>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {AppRootState, useTypedDispatch} from \"../../app/store\";\r\nimport {loginTC} from \"./login-reduce\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useTypedDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootState>(state => state.login.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            alert(JSON.stringify(values));\r\n        },\r\n\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps(\"email\")}/>\r\n\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                        />\r\n\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>} checked={formik.values.rememberMe}\r\n                                          {...formik.getFieldProps(\"rememberMe\")} />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {TaskType} from \"../api/todolists_api\";\r\nimport TodoListLists from \"../features/TodolistsList/Todolist/TodoListLists\";\r\nimport CustomizedSnackbars from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootState, useTypedDispatch} from \"./store\";\r\nimport {initializedTC, RequestStatusType} from \"./app-reducer\";\r\nimport {BrowserRouter, Route, Routes, useNavigate} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/login-reduce\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootState, RequestStatusType>((state) => state.app.status)\r\n    const initialized = useSelector<AppRootState, boolean>((state) => state.app.initialized)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>((state) => state.login.isLoggedIn)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const dispacth = useTypedDispatch()\r\n\r\n    useEffect(() => {\r\n        dispacth(initializedTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        initialized && !isLoggedIn && navigate(\"/login\")\r\n    }, [isLoggedIn, initialized])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispacth(logoutTC())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <div style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <CustomizedSnackbars/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/login\"} element={<Login/>}></Route>\r\n                    <Route path={\"/\"} element={<TodoListLists demo={demo}/>}></Route>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}